{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { postsApi } from '../src/api/api';\nimport { Form } from '../src/Components/form';\n\nconst View = props => {\n  const {\n    0: post,\n    1: setPost\n  } = useState(props.post);\n  const {\n    0: showForm,\n    1: setToogleSowForm\n  } = useState(false);\n  const isAutor = true;\n\n  const toogleShowForm = () => {\n    setToogleSowForm(!showForm);\n  };\n\n  const deletePost = async id => {\n    await postsApi.dellPost(id);\n    setPost('Пост был удален');\n  };\n\n  const updatePost = async data => {\n    const response = await postsApi.updatePost(data);\n    setPost(response);\n  };\n\n  return __jsx(\"div\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\")), __jsx(Link, {\n    href: \"/posts\"\n  }, __jsx(\"a\", null, \"\\u041F\\u043E\\u0441\\u0442\\u044B\")), typeof post === 'object' ? __jsx(\"div\", null, __jsx(\"p\", null, post.title), __jsx(\"p\", null, post.autor), __jsx(\"p\", null, post.description)) : __jsx(\"p\", null, post), isAutor && __jsx(\"div\", null, __jsx(\"button\", {\n    disabled: typeof post !== 'object',\n    onClick: () => deletePost(post._id)\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"), __jsx(\"button\", {\n    onClick: toogleShowForm\n  }, !showForm ? 'Изменить' : 'Отменить')), showForm && __jsx(Form, {\n    newPost: updatePost,\n    id: post._id,\n    autor: \"\\u0412\\u0430\\u0441\\u044F \\u041F\\u0443\\u043F\\u043A\\u0438\\u043D\"\n  }));\n};\n\nView.getInitialProps = async context => {\n  return {\n    post: context.query.post\n  };\n};\n\nexport default withRouter(View);","map":{"version":3,"sources":["D:/Next/next_express/pages/view.js"],"names":["React","useState","useEffect","Link","Router","withRouter","postsApi","Form","View","props","post","setPost","showForm","setToogleSowForm","isAutor","toogleShowForm","deletePost","id","dellPost","updatePost","data","response","title","autor","description","_id","getInitialProps","context","query"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,IAAT,QAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAACQ,KAAK,CAACC,IAAP,CAAhC;AACA,QAAM;AAAA,OAACE,QAAD;AAAA,OAAWC;AAAX,MAA+BZ,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAMa,OAAO,GAAG,IAAhB;;AAEA,QAAMC,cAAc,GAAG,MAAM;AACzBF,IAAAA,gBAAgB,CAAC,CAACD,QAAF,CAAhB;AACH,GAFD;;AAKA,QAAMI,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B,UAAMX,QAAQ,CAACY,QAAT,CAAkBD,EAAlB,CAAN;AACAN,IAAAA,OAAO,CAAC,iBAAD,CAAP;AACH,GAHD;;AAKA,QAAMQ,UAAU,GAAG,MAAOC,IAAP,IAAgB;AAC/B,UAAMC,QAAQ,GAAG,MAAMf,QAAQ,CAACa,UAAT,CAAoBC,IAApB,CAAvB;AACAT,IAAAA,OAAO,CAACU,QAAD,CAAP;AACH,GAHD;;AAKA,SACI,mBACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,8DADJ,CADJ,EAII,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,kDADJ,CAJJ,EAQS,OAAOX,IAAP,KAAgB,QAAjB,GAEI,mBACI,iBAAIA,IAAI,CAACY,KAAT,CADJ,EAEI,iBAAIZ,IAAI,CAACa,KAAT,CAFJ,EAGI,iBAAIb,IAAI,CAACc,WAAT,CAHJ,CAFJ,GAOM,iBAAId,IAAJ,CAfd,EAkBQI,OAAO,IAAI,mBACP;AAAQ,IAAA,QAAQ,EAAE,OAAOJ,IAAP,KAAgB,QAAlC;AAA4C,IAAA,OAAO,EAAE,MAAMM,UAAU,CAACN,IAAI,CAACe,GAAN;AAArE,kDADO,EAEP;AAAQ,IAAA,OAAO,EAAEV;AAAjB,KAAkC,CAACH,QAAD,GAAY,UAAZ,GAAyB,UAA3D,CAFO,CAlBnB,EAwBQA,QAAQ,IAAI,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEO,UAAf;AAA2B,IAAA,EAAE,EAAET,IAAI,CAACe,GAApC;AAAyC,IAAA,KAAK,EAAC;AAA/C,IAxBpB,CADJ;AA6BH,CAjDD;;AAkDAjB,IAAI,CAACkB,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtC,SAAO;AAAEjB,IAAAA,IAAI,EAAEiB,OAAO,CAACC,KAAR,CAAclB;AAAtB,GAAP;AACH,CAFD;;AAGA,eAAeL,UAAU,CAACG,IAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Link from 'next/link'\r\nimport Router, { withRouter } from 'next/router'\r\nimport { postsApi } from '../src/api/api';\r\nimport { Form } from '../src/Components/form';\r\n\r\nconst View = (props) => {\r\n    const [post, setPost] = useState(props.post)\r\n    const [showForm, setToogleSowForm] = useState(false)\r\n    const isAutor = true\r\n\r\n    const toogleShowForm = () => {\r\n        setToogleSowForm(!showForm)\r\n    }\r\n\r\n\r\n    const deletePost = async (id) => {\r\n        await postsApi.dellPost(id)\r\n        setPost('Пост был удален')\r\n    }\r\n\r\n    const updatePost = async (data) => {\r\n        const response = await postsApi.updatePost(data)\r\n        setPost(response)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link href=\"/\">\r\n                <a>Главная</a>\r\n            </Link>\r\n            <Link href='/posts'>\r\n                <a>Посты</a>\r\n            </Link>\r\n            {\r\n                (typeof post === 'object')\r\n                    ?\r\n                    <div>\r\n                        <p>{post.title}</p>\r\n                        <p>{post.autor}</p>\r\n                        <p>{post.description}</p>\r\n                    </div>\r\n                    : <p>{post}</p>\r\n            }\r\n            {\r\n                isAutor && <div>\r\n                    <button disabled={typeof post !== 'object'} onClick={() => deletePost(post._id)}>Удалить</button>\r\n                    <button onClick={toogleShowForm}>{!showForm ? 'Изменить' : 'Отменить'}</button>\r\n                </div>\r\n            }\r\n            {\r\n                showForm && <Form newPost={updatePost} id={post._id} autor='Вася Пупкин' />\r\n            }\r\n        </div>\r\n    )\r\n}\r\nView.getInitialProps = async (context) => {\r\n    return { post: context.query.post }\r\n}\r\nexport default withRouter(View);    "]},"metadata":{},"sourceType":"module"}