{"ast":null,"code":"import _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport { Form } from '../src/Components/form';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      posts: _this.props.posts || []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"newPost\", function _callee(post) {\n      var response, json;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/add', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json;charset=utf-8'\n                },\n                body: _JSON$stringify(post)\n              }));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              json = _context.sent;\n\n              _this.setState({\n                posts: [].concat(_toConsumableArray(_this.state.posts), [json])\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deletePost\", function _callee2(id) {\n      var response;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/posts/del/\".concat(id), {\n                method: 'DELETE'\n              }));\n\n            case 2:\n              response = _context2.sent;\n\n              _this.setState({\n                posts: _this.state.posts.filter(function (post) {\n                  return post._id !== id;\n                })\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    // setNewDescription = (e) => {\n    //   this.setState({\n    //     newDescription: e.target.value\n    //   });\n    // }\n    // updatePost = async (id) => {\n    //   const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\n    //     method: 'PUT',\n    //     headers: {\n    //       'Content-Type': 'application/json;charset=utf-8'\n    //     },\n    //     body: JSON.stringify(this.state.newDescription)\n    //   })\n    //   const json = await response.json()\n    //   console.log(json)\n    // this.setState({\n    //   posts: [...this.state.posts, json]\n    // });\n    // }\n    // toogleEditMode = (id) => {\n    //   this.setState({\n    //     posts: this.state.posts.map(post => post.id)\n    //   });\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var posts = this.state.posts;\n      return __jsx(\"div\", null, __jsx(Link, {\n        href: \"/\"\n      }, __jsx(\"a\", null, \"back\")), posts.map(function (post) {\n        return __jsx(\"div\", {\n          key: post._id\n        }, __jsx(\"h1\", null, \"My blog post: \", post.name), __jsx(\"p\", null, post.description, \" id :\", post._id.toString()), __jsx(\"button\", {\n          onClick: function onClick() {\n            return _this2.deletePost(post._id);\n          }\n        }, \"delete\"));\n      }), __jsx(Form, {\n        newPost: this.newPost\n      }));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\n_defineProperty(Post, \"getInitialProps\", function _callee3(context) {\n  var res, json;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!context.req) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            posts: _Array$from(context.query)\n          });\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/all'));\n\n        case 6:\n          res = _context3.sent;\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 9:\n          json = _context3.sent;\n          console.log(json);\n          return _context3.abrupt(\"return\", {\n            posts: json.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n});\n\nexport default Post;","map":{"version":3,"sources":["D:/Next/next_express/pages/posts.js"],"names":["React","Component","fetch","Link","Form","Post","posts","props","post","method","headers","body","response","json","setState","state","id","filter","_id","map","name","description","toString","deletePost","newPost","context","req","query","res","console","log","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport Link from 'next/link'\r\nimport { Form } from '../src/Components/form'\r\n\r\nclass Post extends Component {\r\n\r\n  state = {\r\n    posts: this.props.posts || []\r\n  };\r\n\r\n  static getInitialProps = async (context) => {\r\n    if (context.req) {\r\n      return { posts: Array.from(context.query) }\r\n    } else {\r\n      const res = await fetch('http://localhost:3000/posts/all')\r\n      const json = await res.json()\r\n      console.log(json)\r\n      return { posts: json.data }\r\n    }\r\n  }\r\n\r\n  newPost = async (post) => {\r\n    const response = await fetch('http://localhost:3000/posts/add', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(post)\r\n    })\r\n    const json = await response.json()\r\n    this.setState({\r\n      posts: [...this.state.posts, json]\r\n    });\r\n  }\r\n\r\n  deletePost = async (id) => {\r\n    const response = await fetch(`http://localhost:3000/posts/del/${id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    this.setState({\r\n      posts: this.state.posts.filter(post => post._id !== id)\r\n    });\r\n  }\r\n\r\n  // setNewDescription = (e) => {\r\n  //   this.setState({\r\n  //     newDescription: e.target.value\r\n  //   });\r\n  // }\r\n\r\n  // updatePost = async (id) => {\r\n  //   const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\r\n  //     method: 'PUT',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: JSON.stringify(this.state.newDescription)\r\n  //   })\r\n  //   const json = await response.json()\r\n  //   console.log(json)\r\n\r\n  // this.setState({\r\n  //   posts: [...this.state.posts, json]\r\n  // });\r\n  // }\r\n\r\n  // toogleEditMode = (id) => {\r\n  //   this.setState({\r\n  //     posts: this.state.posts.map(post => post.id)\r\n  //   });\r\n  // }\r\n\r\n\r\n\r\n  render() {\r\n    const posts = this.state.posts;\r\n    return (\r\n      <div>\r\n        <Link href=\"/\">\r\n          <a>back</a>\r\n        </Link>\r\n        {posts.map(post => <div key={post._id}>\r\n          <h1>My blog post: {post.name}</h1>\r\n          <p>{post.description} id :{post._id.toString()}</p>\r\n          <button onClick={() => this.deletePost(post._id)}>delete</button>\r\n        </div>\r\n        )}\r\n        <Form newPost={this.newPost} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}