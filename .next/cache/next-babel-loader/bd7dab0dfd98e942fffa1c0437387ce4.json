{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _this = this;\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { postsApi } from '../src/api/api';\nimport { Form } from '../src/Components/form';\n\nvar View = function View(props) {\n  var _useState = useState(props.post),\n      post = _useState[0],\n      setPost = _useState[1];\n\n  var _useState2 = useState(false),\n      showForm = _useState2[0],\n      setToogleSowForm = _useState2[1];\n\n  var isAutor = true;\n\n  var deletePost = function deletePost(id) {\n    return _regeneratorRuntime.async(function deletePost$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(postsApi.dellPost(id));\n\n          case 2:\n            setPost('Пост был удален');\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  updatePost = function updatePost(id) {\n    var response, json;\n    return _regeneratorRuntime.async(function updatePost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000//posts/update/\".concat(id), {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n              },\n              body: _JSON$stringify(newDescription)\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context2.sent;\n            console.log(json);\n\n            _this.setState({\n              posts: [].concat(_toConsumableArray(_this.state.posts), [json])\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\")), typeof post === 'object' ? __jsx(\"div\", null, __jsx(\"p\", null, post.title), __jsx(\"p\", null, post.autor), __jsx(\"p\", null, post.description)) : __jsx(\"p\", null, post), isAutor && __jsx(\"div\", null, __jsx(\"button\", {\n    disabled: typeof post !== 'object',\n    onClick: function onClick() {\n      return deletePost(post._id);\n    }\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"), __jsx(\"button\", null, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\")), showForm && __jsx(Form, {\n    newPost: updatePost,\n    id: post._id,\n    autor: \"\\u0412\\u0430\\u0441\\u044F \\u041F\\u0443\\u043F\\u043A\\u0438\\u043D\"\n  }), __jsx(Link, {\n    href: \"/posts\"\n  }, __jsx(\"a\", null, \"\\u041F\\u043E\\u0441\\u0442\\u044B\")));\n};\n\nView.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", {\n            post: context.query.post\n          });\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(View);","map":{"version":3,"sources":["D:/Next/next_express/pages/view.js"],"names":["React","useState","useEffect","Link","Router","withRouter","postsApi","Form","View","props","post","setPost","showForm","setToogleSowForm","isAutor","deletePost","id","dellPost","updatePost","fetch","method","headers","body","newDescription","response","json","console","log","setState","posts","state","title","autor","description","_id","getInitialProps","context","query"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,IAAT,QAAqB,wBAArB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA,kBACIR,QAAQ,CAACQ,KAAK,CAACC,IAAP,CADZ;AAAA,MACbA,IADa;AAAA,MACPC,OADO;;AAAA,mBAEiBV,QAAQ,CAAC,KAAD,CAFzB;AAAA,MAEbW,QAFa;AAAA,MAEHC,gBAFG;;AAGpB,MAAMC,OAAO,GAAG,IAAhB;;AAGA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACTV,QAAQ,CAACW,QAAT,CAAkBD,EAAlB,CADS;;AAAA;AAEfL,YAAAA,OAAO,CAAC,iBAAD,CAAP;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAKAO,EAAAA,UAAU,GAAG,oBAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACUG,KAAK,+CAAwCH,EAAxC,GAA8C;AACxEI,cAAAA,MAAM,EAAE,KADgE;AAExEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF+D;AAKxEC,cAAAA,IAAI,EAAE,gBAAeC,cAAf;AALkE,aAA9C,CADf;;AAAA;AACPC,YAAAA,QADO;AAAA;AAAA,6CAQMA,QAAQ,CAACC,IAAT,EARN;;AAAA;AAQPA,YAAAA,IARO;AASbC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEF,YAAA,KAAI,CAACG,QAAL,CAAc;AACZC,cAAAA,KAAK,+BAAM,KAAI,CAACC,KAAL,CAAWD,KAAjB,IAAwBJ,IAAxB;AADO,aAAd;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAgBA,SACI,mBACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,8DADJ,CADJ,EAKS,OAAOf,IAAP,KAAgB,QAAjB,GAEI,mBACI,iBAAIA,IAAI,CAACqB,KAAT,CADJ,EAEI,iBAAIrB,IAAI,CAACsB,KAAT,CAFJ,EAGI,iBAAItB,IAAI,CAACuB,WAAT,CAHJ,CAFJ,GAOM,iBAAIvB,IAAJ,CAZd,EAeQI,OAAO,IAAI,mBACP;AAAQ,IAAA,QAAQ,EAAE,OAAOJ,IAAP,KAAgB,QAAlC;AAA4C,IAAA,OAAO,EAAE;AAAA,aAAMK,UAAU,CAACL,IAAI,CAACwB,GAAN,CAAhB;AAAA;AAArD,kDADO,EAEP,yEAFO,CAfnB,EAqBQtB,QAAQ,IAAI,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEM,UAAf;AAA2B,IAAA,EAAE,EAAER,IAAI,CAACwB,GAApC;AAAyC,IAAA,KAAK,EAAC;AAA/C,IArBpB,EAwBI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,kDADJ,CAxBJ,CADJ;AA+BH,CA1DD;;AA2DA1B,IAAI,CAAC2B,eAAL,GAAuB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,4CACZ;AAAE1B,YAAAA,IAAI,EAAE0B,OAAO,CAACC,KAAR,CAAc3B;AAAtB,WADY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAGA,eAAeL,UAAU,CAACG,IAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Link from 'next/link'\r\nimport Router, { withRouter } from 'next/router'\r\nimport { postsApi } from '../src/api/api';\r\nimport { Form } from '../src/Components/form';\r\n\r\nconst View = (props) => {\r\n    const [post, setPost] = useState(props.post)\r\n    const [showForm, setToogleSowForm] = useState(false)\r\n    const isAutor = true\r\n\r\n\r\n    const deletePost = async (id) => {\r\n        await postsApi.dellPost(id)\r\n        setPost('Пост был удален')\r\n    }\r\n\r\n    updatePost = async (id) => {\r\n    const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(newDescription)\r\n    })\r\n    const json = await response.json()\r\n    console.log(json)\r\n\r\n  this.setState({\r\n    posts: [...this.state.posts, json]\r\n  });\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <Link href=\"/\">\r\n                <a>Главная</a>\r\n            </Link>\r\n            {\r\n                (typeof post === 'object')\r\n                    ?\r\n                    <div>\r\n                        <p>{post.title}</p>\r\n                        <p>{post.autor}</p>\r\n                        <p>{post.description}</p>\r\n                    </div>\r\n                    : <p>{post}</p>\r\n            }\r\n            {\r\n                isAutor && <div>\r\n                    <button disabled={typeof post !== 'object'} onClick={() => deletePost(post._id)}>Удалить</button>\r\n                    <button >Изменить</button>\r\n                </div>\r\n            }\r\n            {\r\n                showForm && <Form newPost={updatePost} id={post._id} autor='Вася Пупкин'/> \r\n            }\r\n\r\n            <Link href='/posts'>\r\n                <a>Посты</a>\r\n            </Link>\r\n        </div>\r\n\r\n    )\r\n}\r\nView.getInitialProps = async (context) => {\r\n    return { post: context.query.post }\r\n}\r\nexport default withRouter(View);    "]},"metadata":{},"sourceType":"module"}