{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { Form } from '../src/Components/form';\nimport { postsApi } from '../src/api/api';\nimport Router from 'next/router';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      posts: _this.props.posts || []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"newPost\", function _callee(post) {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(postsApi.createNewPost(post));\n\n            case 2:\n              response = _context.sent;\n\n              _this.setState({\n                posts: [].concat(_toConsumableArray(_this.state.posts), [response])\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"deletePost\", function _callee2(id) {\n      var response;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(postsApi.dellPost(id));\n\n            case 2:\n              response = _context2.sent;\n\n              _this.setState({\n                posts: _this.state.posts.filter(function (post) {\n                  return post._id !== response.id;\n                })\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handler\", function (url, id) {\n      Router.push({\n        pathname: url,\n        query: {\n          id: id\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var posts = this.state.posts;\n      return __jsx(\"div\", null, __jsx(Link, {\n        href: \"/\"\n      }, __jsx(\"a\", null, \"\\u0433\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\")), posts.map(function (post) {\n        return __jsx(\"div\", {\n          key: post._id,\n          onClick: function onClick() {\n            return handler(\"/view/\", post._id);\n          }\n        }, __jsx(\"h1\", null, post.title), __jsx(\"p\", null, \"\\u0410\\u0432\\u0442\\u043E\\u0440: \", post.autor), __jsx(\"p\", null, \"createdDate: \", post.createdDate.toString()), __jsx(\"button\", {\n          onClick: function onClick() {\n            return _this2.deletePost(post._id);\n          }\n        }, \"delete\"));\n      }), __jsx(Form, {\n        newPost: this.newPost\n      }));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\n_defineProperty(Post, \"getInitialProps\", function _callee3(context) {\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!context.req) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", {\n            posts: context.query\n          });\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(postsApi.getAllPosts());\n\n        case 6:\n          _context3.t0 = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            posts: _context3.t0\n          });\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n});\n\nexport default Post;","map":{"version":3,"sources":["D:/Next/next_express/pages/posts.js"],"names":["React","Component","Link","Form","postsApi","Router","Post","posts","props","post","createNewPost","response","setState","state","id","dellPost","filter","_id","url","push","pathname","query","map","handler","title","autor","createdDate","toString","deletePost","newPost","context","req","getAllPosts"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;IAEMC,I;;;;;;;;;;;;;;;;;;4DAEI;AACNC,MAAAA,KAAK,EAAE,MAAKC,KAAL,CAAWD,KAAX,IAAoB;AADrB,K;;8DAYE,iBAAOE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACeL,QAAQ,CAACM,aAAT,CAAuBD,IAAvB,CADf;;AAAA;AACFE,cAAAA,QADE;;AAER,oBAAKC,QAAL,CAAc;AACZL,gBAAAA,KAAK,+BAAM,MAAKM,KAAL,CAAWN,KAAjB,IAAwBI,QAAxB;AADO,eAAd;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;iEAOG,kBAAOG,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACYV,QAAQ,CAACW,QAAT,CAAkBD,EAAlB,CADZ;;AAAA;AACLH,cAAAA,QADK;;AAEX,oBAAKC,QAAL,CAAc;AACZL,gBAAAA,KAAK,EAAE,MAAKM,KAAL,CAAWN,KAAX,CAAiBS,MAAjB,CAAwB,UAAAP,IAAI;AAAA,yBAAIA,IAAI,CAACQ,GAAL,KAAaN,QAAQ,CAACG,EAA1B;AAAA,iBAA5B;AADK,eAAd;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;8DAwBH,UAACI,GAAD,EAAKJ,EAAL,EAAY;AACpBT,MAAAA,MAAM,CAACc,IAAP,CAAY;AACVC,QAAAA,QAAQ,EAAEF,GADA;AAEVG,QAAAA,KAAK,EAAE;AAAEP,UAAAA,EAAE,EAAFA;AAAF;AAFG,OAAZ;AAID,K;;;;;;;6BAIQ;AAAA;;AACP,UAAMP,KAAK,GAAG,KAAKM,KAAL,CAAWN,KAAzB;AACA,aACE,mBACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,SACE,8DADF,CADF,EAIGA,KAAK,CAACe,GAAN,CAAU,UAAAb,IAAI;AAAA,eACb;AAAK,UAAA,GAAG,EAAEA,IAAI,CAACQ,GAAf;AAAoB,UAAA,OAAO,EAAE;AAAA,mBAAMM,OAAO,WAAUd,IAAI,CAACQ,GAAf,CAAb;AAAA;AAA7B,WACE,kBAAKR,IAAI,CAACe,KAAV,CADF,EAEE,qDAAWf,IAAI,CAACgB,KAAhB,CAFF,EAGE,kCAAiBhB,IAAI,CAACiB,WAAL,CAAiBC,QAAjB,EAAjB,CAHF,EAIE;AAAQ,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACC,UAAL,CAAgBnB,IAAI,CAACQ,GAArB,CAAN;AAAA;AAAjB,oBAJF,CADa;AAAA,OAAd,CAJH,EAYE,MAAC,IAAD;AAAM,QAAA,OAAO,EAAE,KAAKY;AAApB,QAZF,CADF;AAgBD;;;;EAxEgB5B,S;;gBAAbK,I,qBAMqB,kBAAOwB,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,eACnBA,OAAO,CAACC,GADW;AAAA;AAAA;AAAA;;AAAA,4CAEd;AAAExB,YAAAA,KAAK,EAAEuB,OAAO,CAACT;AAAjB,WAFc;;AAAA;AAAA;AAAA,2CAICjB,QAAQ,CAAC4B,WAAT,EAJD;;AAAA;AAAA;AAAA;AAIZzB,YAAAA,KAJY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;AAoE3B,eAAeD,IAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Link from 'next/link'\r\nimport { Form } from '../src/Components/form'\r\nimport { postsApi } from '../src/api/api';\r\nimport Router from 'next/router'\r\n\r\nclass Post extends Component {\r\n\r\n  state = {\r\n    posts: this.props.posts || []\r\n  };\r\n\r\n  static getInitialProps = async (context) => {\r\n    if (context.req) {\r\n      return { posts: context.query }\r\n    } else {\r\n      return { posts: await postsApi.getAllPosts() }\r\n    }\r\n  }\r\n\r\n  newPost = async (post) => {\r\n    const response = await postsApi.createNewPost(post)\r\n    this.setState({\r\n      posts: [...this.state.posts, response]\r\n    });\r\n  }\r\n\r\n  deletePost = async (id) => {\r\n    const response = await postsApi.dellPost(id)\r\n    this.setState({\r\n      posts: this.state.posts.filter(post => post._id !== response.id)\r\n    });\r\n  }\r\n\r\n\r\n\r\n  // updatePost = async (id) => {\r\n  //   const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\r\n  //     method: 'PUT',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json;charset=utf-8'\r\n  //     },\r\n  //     body: JSON.stringify(this.state.newDescription)\r\n  //   })\r\n  //   const json = await response.json()\r\n  //   console.log(json)\r\n\r\n  // this.setState({\r\n  //   posts: [...this.state.posts, json]\r\n  // });\r\n  // }\r\n  handler = (url,id) => {\r\n    Router.push({\r\n      pathname: url,\r\n      query: { id },\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const posts = this.state.posts;\r\n    return (\r\n      <div>\r\n        <Link href=\"/\">\r\n          <a>главная</a>\r\n        </Link>\r\n        {posts.map(post =>\r\n          <div key={post._id} onClick={() => handler(`/view/`,post._id)}>\r\n            <h1>{post.title}</h1>\r\n            <p>Автор: {post.autor}</p>\r\n            <p>createdDate: {post.createdDate.toString()}</p>\r\n            <button onClick={() => this.deletePost(post._id)}>delete</button>\r\n          </div>\r\n        )}\r\n        <Form newPost={this.newPost} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}