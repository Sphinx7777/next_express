{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router, { withRouter } from 'next/router';\nimport { postsApi } from '../src/api/api';\nimport { Form } from '../src/Components/form';\n\nconst View = props => {\n  const {\n    0: post,\n    1: setPost\n  } = useState(props.post);\n  const {\n    0: showForm,\n    1: setToogleSowForm\n  } = useState(false);\n  const isAutor = true;\n\n  const deletePost = async id => {\n    await postsApi.dellPost(id);\n    setPost('Пост был удален');\n  };\n\n  const updatePost = async id => {\n    const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: _JSON$stringify(newDescription)\n    });\n    const json = await response.json();\n    console.log(json);\n    this.setState({\n      posts: [...this.state.posts, json]\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(Link, {\n    href: \"/\"\n  }, __jsx(\"a\", null, \"\\u0413\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F\")), typeof post === 'object' ? __jsx(\"div\", null, __jsx(\"p\", null, post.title), __jsx(\"p\", null, post.autor), __jsx(\"p\", null, post.description)) : __jsx(\"p\", null, post), isAutor && __jsx(\"div\", null, __jsx(\"button\", {\n    disabled: typeof post !== 'object',\n    onClick: () => deletePost(post._id)\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"), __jsx(\"button\", null, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\")), showForm && __jsx(Form, {\n    newPost: updatePost,\n    id: post._id,\n    autor: \"\\u0412\\u0430\\u0441\\u044F \\u041F\\u0443\\u043F\\u043A\\u0438\\u043D\"\n  }), __jsx(Link, {\n    href: \"/posts\"\n  }, __jsx(\"a\", null, \"\\u041F\\u043E\\u0441\\u0442\\u044B\")));\n};\n\nView.getInitialProps = async context => {\n  return {\n    post: context.query.post\n  };\n};\n\nexport default withRouter(View);","map":{"version":3,"sources":["D:/Next/next_express/pages/view.js"],"names":["React","useState","useEffect","Link","Router","withRouter","postsApi","Form","View","props","post","setPost","showForm","setToogleSowForm","isAutor","deletePost","id","dellPost","updatePost","response","fetch","method","headers","body","newDescription","json","console","log","setState","posts","state","title","autor","description","_id","getInitialProps","context","query"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,IAAT,QAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAACQ,KAAK,CAACC,IAAP,CAAhC;AACA,QAAM;AAAA,OAACE,QAAD;AAAA,OAAWC;AAAX,MAA+BZ,QAAQ,CAAC,KAAD,CAA7C;AACA,QAAMa,OAAO,GAAG,IAAhB;;AAGA,QAAMC,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B,UAAMV,QAAQ,CAACW,QAAT,CAAkBD,EAAlB,CAAN;AACAL,IAAAA,OAAO,CAAC,iBAAD,CAAP;AACH,GAHD;;AAKA,QAAMO,UAAU,GAAG,MAAOF,EAAP,IAAc;AACjC,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsCJ,EAAG,EAA3C,EAA8C;AACxEK,MAAAA,MAAM,EAAE,KADgE;AAExEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+D;AAKxEC,MAAAA,IAAI,EAAE,gBAAeC,cAAf;AALkE,KAA9C,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEF,SAAKG,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,KAAf,EAAsBJ,IAAtB;AADK,KAAd;AAGC,GAdC;;AAgBA,SACI,mBACI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,8DADJ,CADJ,EAKS,OAAOf,IAAP,KAAgB,QAAjB,GAEI,mBACI,iBAAIA,IAAI,CAACqB,KAAT,CADJ,EAEI,iBAAIrB,IAAI,CAACsB,KAAT,CAFJ,EAGI,iBAAItB,IAAI,CAACuB,WAAT,CAHJ,CAFJ,GAOM,iBAAIvB,IAAJ,CAZd,EAeQI,OAAO,IAAI,mBACP;AAAQ,IAAA,QAAQ,EAAE,OAAOJ,IAAP,KAAgB,QAAlC;AAA4C,IAAA,OAAO,EAAE,MAAMK,UAAU,CAACL,IAAI,CAACwB,GAAN;AAArE,kDADO,EAEP,yEAFO,CAfnB,EAqBQtB,QAAQ,IAAI,MAAC,IAAD;AAAM,IAAA,OAAO,EAAEM,UAAf;AAA2B,IAAA,EAAE,EAAER,IAAI,CAACwB,GAApC;AAAyC,IAAA,KAAK,EAAC;AAA/C,IArBpB,EAwBI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACI,kDADJ,CAxBJ,CADJ;AA+BH,CA1DD;;AA2DA1B,IAAI,CAAC2B,eAAL,GAAuB,MAAOC,OAAP,IAAmB;AACtC,SAAO;AAAE1B,IAAAA,IAAI,EAAE0B,OAAO,CAACC,KAAR,CAAc3B;AAAtB,GAAP;AACH,CAFD;;AAGA,eAAeL,UAAU,CAACG,IAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Link from 'next/link'\r\nimport Router, { withRouter } from 'next/router'\r\nimport { postsApi } from '../src/api/api';\r\nimport { Form } from '../src/Components/form';\r\n\r\nconst View = (props) => {\r\n    const [post, setPost] = useState(props.post)\r\n    const [showForm, setToogleSowForm] = useState(false)\r\n    const isAutor = true\r\n\r\n\r\n    const deletePost = async (id) => {\r\n        await postsApi.dellPost(id)\r\n        setPost('Пост был удален')\r\n    }\r\n\r\n    const updatePost = async (id) => {\r\n    const response = await fetch(`http://localhost:3000//posts/update/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(newDescription)\r\n    })\r\n    const json = await response.json()\r\n    console.log(json)\r\n\r\n  this.setState({\r\n    posts: [...this.state.posts, json]\r\n  });\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <Link href=\"/\">\r\n                <a>Главная</a>\r\n            </Link>\r\n            {\r\n                (typeof post === 'object')\r\n                    ?\r\n                    <div>\r\n                        <p>{post.title}</p>\r\n                        <p>{post.autor}</p>\r\n                        <p>{post.description}</p>\r\n                    </div>\r\n                    : <p>{post}</p>\r\n            }\r\n            {\r\n                isAutor && <div>\r\n                    <button disabled={typeof post !== 'object'} onClick={() => deletePost(post._id)}>Удалить</button>\r\n                    <button >Изменить</button>\r\n                </div>\r\n            }\r\n            {\r\n                showForm && <Form newPost={updatePost} id={post._id} autor='Вася Пупкин'/> \r\n            }\r\n\r\n            <Link href='/posts'>\r\n                <a>Посты</a>\r\n            </Link>\r\n        </div>\r\n\r\n    )\r\n}\r\nView.getInitialProps = async (context) => {\r\n    return { post: context.query.post }\r\n}\r\nexport default withRouter(View);    "]},"metadata":{},"sourceType":"module"}