{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport var postsApi = {\n  getAllPosts: function getAllPosts() {\n    var resJson, res;\n    return _regeneratorRuntime.async(function getAllPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/all'));\n\n          case 3:\n            resJson = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(resJson.json());\n\n          case 6:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"some error \".concat(_context.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  },\n  createNewPost: function createNewPost(post) {\n    var resJson, res;\n    return _regeneratorRuntime.async(function createNewPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/add', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n              },\n              body: _JSON$stringify(post)\n            }));\n\n          case 3:\n            resJson = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(resJson.json());\n\n          case 6:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"some error \".concat(_context2.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  }\n};","map":{"version":3,"sources":["D:/Next/next_express/src/api/api.js"],"names":["fetch","postsApi","getAllPosts","resJson","json","res","data","console","log","message","createNewPost","post","method","headers","body"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAGA,OAAO,IAAMC,QAAQ,GAAG;AAEjBC,EAAAA,WAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIUF,KAAK,CAAC,iCAAD,CAJf;;AAAA;AAING,YAAAA,OAJM;AAAA;AAAA,6CAKMA,OAAO,CAACC,IAAR,EALN;;AAAA;AAKNC,YAAAA,GALM;AAAA,6CAMLA,GAAG,CAACC,IANC;;AAAA;AAAA;AAAA;AAQZC,YAAAA,OAAO,CAACC,GAAR,sBAA0B,YAAIC,OAA9B;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYbC,EAAAA,aAZa,yBAYCC,IAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAcEX,KAAK,CAAC,iCAAD,EAAoC;AAC3DY,cAAAA,MAAM,EAAE,MADmD;AAE3DC,cAAAA,OAAO,EAAE;AACT,gCAAgB;AADP,eAFkD;AAK3DC,cAAAA,IAAI,EAAE,gBAAeH,IAAf;AALqD,aAApC,CAdP;;AAAA;AAcdR,YAAAA,OAdc;AAAA;AAAA,6CAqBFA,OAAO,CAACC,IAAR,EArBE;;AAAA;AAqBdC,YAAAA,GArBc;AAAA,8CAsBbA,GAtBa;;AAAA;AAAA;AAAA;AAwBZE,YAAAA,OAAO,CAACC,GAAR,sBAA0B,aAAIC,OAA9B;;AAxBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\n\r\nexport const postsApi = {\r\n\r\n\tasync getAllPosts() {\r\n        try {\r\n            const resJson = await fetch('http://localhost:3000/posts/all');\r\n            const res = await resJson.json();\r\n            return res.data\r\n        }catch (err){\r\n            console.log(`some error ${err.message}`)\r\n        }\r\n     },\r\n     \r\n     async createNewPost(post) {\r\n        try {\r\n    const resJson = await fetch('http://localhost:3000/posts/add', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n        body: JSON.stringify(post)\r\n    })\r\n    const res = await resJson.json()\r\n    return res\r\n        }catch (err){\r\n            console.log(`some error ${err.message}`)\r\n        }\r\n\t }\r\n};"]},"metadata":{},"sourceType":"module"}