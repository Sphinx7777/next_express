{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from 'isomorphic-unfetch';\nexport var postsApi = {\n  getAllPosts: function getAllPosts() {\n    var resJson, res;\n    return _regeneratorRuntime.async(function getAllPosts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/all'));\n\n          case 3:\n            resJson = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(resJson.json());\n\n          case 6:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"some error \".concat(_context.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  },\n  createNewPost: function createNewPost(post) {\n    var resJson, res;\n    return _regeneratorRuntime.async(function createNewPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://localhost:3000/posts/add', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n              },\n              body: _JSON$stringify(post)\n            }));\n\n          case 3:\n            resJson = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(resJson.json());\n\n          case 6:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"some error \".concat(_context2.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  },\n  dellPost: function dellPost(id) {\n    var resJson, res;\n    return _regeneratorRuntime.async(function dellPost$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/posts/del/\".concat(id), {\n              method: 'DELETE'\n            }));\n\n          case 3:\n            resJson = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(resJson.json());\n\n          case 6:\n            res = _context3.sent;\n            return _context3.abrupt(\"return\", res);\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(\"some error \".concat(_context3.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 10]]);\n  }\n};","map":{"version":3,"sources":["D:/Next/next_express/src/api/api.js"],"names":["fetch","postsApi","getAllPosts","resJson","json","res","data","console","log","message","createNewPost","post","method","headers","body","dellPost","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAGA,OAAO,IAAMC,QAAQ,GAAG;AAEdC,EAAAA,WAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIUF,KAAK,CAAC,iCAAD,CAJf;;AAAA;AAING,YAAAA,OAJM;AAAA;AAAA,6CAKMA,OAAO,CAACC,IAAR,EALN;;AAAA;AAKNC,YAAAA,GALM;AAAA,6CAMLA,GAAG,CAACC,IANC;;AAAA;AAAA;AAAA;AAQZC,YAAAA,OAAO,CAACC,GAAR,sBAA0B,YAAIC,OAA9B;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYdC,EAAAA,aAZc,yBAYAC,IAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAcUX,KAAK,CAAC,iCAAD,EAAoC;AAC3DY,cAAAA,MAAM,EAAE,MADmD;AAE3DC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFkD;AAK3DC,cAAAA,IAAI,EAAE,gBAAeH,IAAf;AALqD,aAApC,CAdf;;AAAA;AAcNR,YAAAA,OAdM;AAAA;AAAA,6CAqBMA,OAAO,CAACC,IAAR,EArBN;;AAAA;AAqBNC,YAAAA,GArBM;AAAA,8CAsBLA,GAtBK;;AAAA;AAAA;AAAA;AAwBZE,YAAAA,OAAO,CAACC,GAAR,sBAA0B,aAAIC,OAA9B;;AAxBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BdM,EAAAA,QA5Bc,oBA4BLC,EA5BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA8BUhB,KAAK,2CAAoCgB,EAApC,GAA0C;AACjEJ,cAAAA,MAAM,EAAE;AADyD,aAA1C,CA9Bf;;AAAA;AA8BNT,YAAAA,OA9BM;AAAA;AAAA,6CAiCMA,OAAO,CAACC,IAAR,EAjCN;;AAAA;AAiCNC,YAAAA,GAjCM;AAAA,8CAkCLA,GAlCK;;AAAA;AAAA;AAAA;AAoCZE,YAAAA,OAAO,CAACC,GAAR,sBAA0B,aAAIC,OAA9B;;AApCY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\n\r\nexport const postsApi = {\r\n\r\n    async getAllPosts() {\r\n        try {\r\n            const resJson = await fetch('http://localhost:3000/posts/all');\r\n            const res = await resJson.json();\r\n            return res.data\r\n        } catch (err) {\r\n            console.log(`some error ${err.message}`)\r\n        }\r\n    },\r\n\r\n    async createNewPost(post) {\r\n        try {\r\n            const resJson = await fetch('http://localhost:3000/posts/add', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(post)\r\n            })\r\n            const res = await resJson.json()\r\n            return res\r\n        } catch (err) {\r\n            console.log(`some error ${err.message}`)\r\n        }\r\n    },\r\n\r\n    async dellPost(id) {\r\n        try {\r\n            const resJson = await fetch(`http://localhost:3000/posts/del/${id}`, {\r\n                method: 'DELETE'\r\n            })\r\n            const res = await resJson.json()\r\n            return res\r\n        } catch (err) {\r\n            console.log(`some error ${err.message}`)\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}